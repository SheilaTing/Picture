{"version":3,"sources":["components/Header.js","components/Footer.js","components/Loadding.js","App.js","serviceWorker.js","index.js","models/index.js","stores/user.js","stores/History.js","stores/image.js","stores/auth.js","stores/index.js","logo.svg"],"names":["Header","styled","header","Logo","img","StyleLink","NavLink","StyleButton","Button","Login","div","Component","observer","useStores","userStore","authStore","history","useHistory","src","LogoUrl","alt","activeClassName","to","exact","currentUser","attributes","username","type","onClick","logOut","push","Footer","footer","Loadding","Home","lazy","History","About","Register","App","fallback","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","AV","init","appId","appKey","serverURL","Auth","password","user","User","setUsername","setPassword","Promise","resolve","reject","signUp","loginedUser","logIn","current","Uploader","file","filename","item","Object","avFile","File","set","save","serverFile","page","limit","query","Query","include","skip","descending","equalTo","find","results","this","observable","action","newList","list","concat","isLoadding","append","length","hasMore","finally","newFilename","newFile","isUploading","err","log","isLogin","values","pullUser","resetUser","historyStore","reset","imageStore","storeContext","createContext","stores","useContext","module","exports"],"mappings":"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","file":"static/js/main.8f87f6b2.chunk.js","sourcesContent":["import React from 'react';\nimport LogoUrl from '../logo.svg';\nimport {NavLink} from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Button } from 'antd';\nimport {useStores} from '../stores';\nimport {observer} from 'mobx-react';  // 监控组件中使用的 store 中的数据变动\nimport {useHistory} from 'react-router-dom';\n\nconst Header = styled.header`\ndisplay:flex;\nalign-items:center;\nbackground-color: #02101f;\npadding:10px 100px;\ncolor:#fff;\n`;\n\nconst Logo = styled.img`\n    height:30px;\n`;\nconst StyleLink = styled(NavLink)`\n    color:#fff;\n    margin-left:30px;\n\n\n    // 给自己加 & 相当于自己，给每个navLink 加\n    &.active{\n        border-bottom:1px solid #fff;\n    }\n`;\n\nconst StyleButton = styled(Button)`\n    margin-left:10px;\n`;\nconst Login = styled.div`\n     margin-left:auto;\n`;\n\nconst Component = observer(()=>{\n    const {userStore,authStore} = useStores();\n    const history = useHistory();\n    // 点击header 登录按钮，跳转到登录页面\n    const handleLoginBtn= ()=>{\n        //跳转页面\n        history.push('/login');\n    } \n\n    // 点击 header 注册按钮，跳转到注册页面\n    const handleRegisterBtn = ()=>{\n        history.push('/register')\n    }\n    // 注销\n    const handleLogOut = ()=>{\n        authStore.logOut();\n    }\n    \n    return (\n        <Header>\n           <Logo src={LogoUrl} alt=\"logo\"/>\n           <nav>\n           <StyleLink activeClassName=\"active\" to=\"/\" exact>首页</StyleLink>\n           <StyleLink activeClassName=\"active\" to=\"/history\" >历史</StyleLink>\n           <StyleLink activeClassName=\"active\" to=\"/about\" >关于</StyleLink>\n           </nav>\n          <Login>\n              {\n                  userStore.currentUser ? <>\n                    {userStore.currentUser.attributes.username} <StyleButton type=\"primary\" onClick={()=> handleLogOut()}>注销</StyleButton>\n                  </> : <>\n                  <StyleButton type=\"primary\" onClick={()=> handleLoginBtn()} >登录</StyleButton>\n                  <StyleButton type=\"primary\" onClick={()=> handleRegisterBtn()} >注册</StyleButton>\n                  </>\n              }\n         \n           \n          </Login>\n        </Header>\n    )\n})\n\nexport default Component;","import React from 'react';\nimport styled from 'styled-components';\n\n\nconst Footer = styled.footer`\n    padding:10px 100px;\n    text-align:center;\n    font-size:12px;\n    color:#aaa;\n`;\n\nfunction Component(){\n    return (\n        <Footer>\n            <h1>Footer</h1>\n        </Footer>\n    )\n}\n\nexport default Component;","import React from 'react';\n\nfunction Loadding(){\n    return (\n        <div>Loadding</div>\n    )\n}\n\nexport default Loadding;","import React, { Suspense, lazy } from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Loadding from './components/Loadding';\nimport 'antd/dist/antd.css';  //antd css\n\n\n// import Home from './pages/Home';\n// import History from './pages/History';\n// import About from './pages/About';\nconst Home = lazy(() => import('./pages/Home'));\nconst History = lazy(() => import('./pages/History'));\nconst About = lazy(() => import('./pages/About'));\n// 竟然还不能这么写\n// const Loadding = lazy(()=> import('./components/Loadding'));\n\nconst Login = lazy(() => import('./pages/Login'));\nconst Register = lazy(() => import('./pages/Register'));\n\nfunction App() {\n  return (\n    <>\n      <Header />\n        <Switch>\n         <main>\n         <Suspense fallback={<Loadding />}>\n            <Route path=\"/\" exact><Home /></Route>\n            <Route path=\"/history\" component={History} />\n            <Route path=\"/about\" component={About}></Route>\n            <Route path=\"/login\" component={Login}></Route>\n            <Route path=\"/register\" component={Register}></Route>\n          </Suspense>\n         </main>\n        </Switch>\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n      <App />\n    </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// 存放一些请求数据\n import AV,{ Query, User } from 'leancloud-storage';\nimport resolve from 'resolve';\n\n AV.init({\n    appId: \"TfCR5MV0xL388sGuQA7XBDSK-gzGzoHsz\",\n    appKey: \"voR91aKAmhzQP03CzPHr4d9C\",\n    serverURL: \"https://tfcr5mv0.lc-cn-n1-shared.com\"\n  });\n\n  // 创建一个认证对象，里面包含注册登录等方法\n  const Auth = {\n      register(username,password){\n          let user = new User();\n          user.setUsername(username);\n          user.setPassword(password);\n          return new Promise((resolve,reject)=>{\n            // user.signUp().then(\n            //     (loginuser)=>{\n            //         console.log('注册成功!');\n            //         resolve(loginuser);\n            //     },(error)=>{\n            //         console.log('注册失败!')\n            //         reject(error)\n            //     }\n            // )\n            user.signUp().then(loginedUser => resolve(loginedUser), error => reject(error))\n          })\n    },\n    //登录\n    login(username,password){\n        return new Promise((resolve,reject)=>{\n            // User.logIn(username,).then((user)=>{\n            //     resolve('登录成功'+{user})\n            // },(error)=>{\n            //     reject(error);\n            // })\n            User.logIn(username, password).then(loginedUser => resolve(loginedUser), error => reject(error));\n        })\n    },\n    // 注销\n    logOut(){\n        User.logOut();\n    },\n\n    // AV 提供的\n    getCurrentUser(){\n        return User.current();\n    }\n  }\n\n  // 上传文件对象，并添加 add 上传方法\n  const Uploader = {\n      add(file,filename){\n        const item = new AV.Object('Image');\n        const avFile = new AV.File(filename, file);\n        item.set('file',avFile); // avFile 保存后会生成一个指向它的 url\n        item.set('filename',filename);\n        item.set('owner',AV.User.current());\n        return new Promise((resolve,reject)=>{\n            item.save().then(serverFile=> resolve(serverFile),error=> reject(error));\n        })\n      } ,\n      // 查询上传历史,并支持分页 每10条信息一页\n      find({page=1,limit=10}){\n          // 查询 Image 表中的内容\n        const query = new AV.Query('Image');\n        query.include('owner');  // 查询包含的字段\n        query.limit(limit); //一次查询10条信息\n        query.skip((page-1)*limit); // 跳过的条数,其实page可以从1开始\n        query.descending('createdAt'); // leanCloud 自动加的字段\n        query.equalTo('owner',AV.User.current()); // 只查询当前用户的上传记录\n        return new Promise((resolve,reject)=>{\n            query.find()\n            .then(results=> resolve(results))\n            .catch(error=> reject(error))\n        })\n      }\n  }\n\n  export {Auth,Uploader};\n","import {observable,action} from 'mobx';\nimport {Auth} from '../models';\n\nclass UserStore{\n    @observable currentUser = null;\n\n    @action pullUser(){\n        this.currentUser = Auth.getCurrentUser();\n    }\n\n    @action resetUser(){\n        this.currentUser = null;\n    }\n}\n\nexport default new UserStore;","import {observable,action} from 'mobx';\nimport {Uploader} from '../models';\nimport {message} from 'antd';\n\nclass HistoryStore{\n    //写了这么多，总结一下 store 中的监控变量的规律\n    //一般监控 action 中传递的参数,然后对这些参数,添加 set get 方法\n    //还有一些 ui层需要用到的判断逻辑变量，例如 loadding 等\n    @observable page=1;\n    @observable limit = 10;  // limit 可以更改，默认为10条吧\n    @observable isLoadding = false;\n    @observable list = []; //用来存放返回结果\n    @observable hasMore = true;  // 是否还有更多数据\n\n   \n    // 将新请求的数据 concat 到原来的数据上\n    @action append(newList){\n        this.list = this.list.concat(newList);\n    }\n\n    @action find(){\n        this.isLoadding = true;\n        Uploader.find({page:this.page,limit:this.limit})\n        .then(newList=>{\n            this.append(newList);\n            this.page++;  // 请求成功后页码++\n            // 判断是否还有更多数据,如果请求回来的条数小于limit 则还有\n            if(newList.length < this.limit){\n                this.hasMore = false;\n            }\n        }).catch(error=>{\n            message.error('加载数据失败')\n        }).finally(()=>{\n            this.isLoadding = false;\n        })\n    }\n\n\n    @action reset(){\n        // 或者卸载组件时 清空列表\n        this.list = [];\n        this.isLoadding = false;\n        this.hasMore = true; // 恢复默认\n        this.page = 0;\n    }\n}\n\nexport default new HistoryStore();","import {observable,action} from 'mobx';\nimport {Uploader} from '../models';\n\nclass ImageStore{\n    @observable filename=\"\";\n    @observable file = null;\n    @observable isUploading=false;\n    @observable serverFile = null;\n\n\n    //设置文件名称\n    @action setFilename(newFilename){\n        this.filename = newFilename;\n    }\n\n    //设置文件对象\n    @action setFile(newFile){\n        this.file = newFile;\n    }\n\n    @action upload(){\n        this.isUploading = true;\n        // 使用 promise 封装\n        return new Promise((resolve,reject)=>{\n            Uploader.add(this.file,this.filename)\n            .then(serverFile=>{\n                // 将服务器返回的文件对象赋值给 serverFile\n                this.serverFile = serverFile;\n                resolve(serverFile);\n            }).catch(err=>{\n                console.log('上传失败');\n                reject(err);\n            }).finally(()=>{\n                this.isUploading = false;\n            })\n        })\n    }\n\n    @action reset(){\n        this.isUploading =false;\n        this.serverFile=null;\n    }\n}\n\nexport default new ImageStore();","import { observable, action } from 'mobx';\nimport { Auth } from '../models';\nimport userStore from './user';\nimport historyStore from './History';\nimport imageStore from './image';\n\n\nclass AuthStore {\n    @observable isLogin = false;\n    @observable isLoadding = false;\n    @observable values = {\n        username: 'Tingting',\n        password: ''\n    };\n\n    @action setIsLogin(isLogin) {\n        this.isLogin = isLogin;\n    }\n\n    @action setPassword(password) {\n        this.values.password = password\n    }\n\n    @action setUsername(username) {\n        this.values.username = username\n    }\n\n    // 之所以不在 model 里面写这些逻辑，是因为想把 model 单独当成一个 获取数据的模型，不污染它里面的内容\n\n\n    @action login() {\n        return new Promise((resolve, reject) => {\n            Auth.login(this.values.username, this.values.password).then((user) => {\n                console.log('登录成功');\n                // 登录成功设置 userStore user 信息\n                userStore.pullUser();\n                resolve(user);\n            }).catch((error) => {\n                console.log('登录失败')\n                reject(error);\n            })\n        })\n      }\n\n    @action register() {\n        // console.log(\"=====\"+this.values.username)\n        // console.log(\"----\"+this.values.password)\n        //当用户调用register 方法时，调用models里面的接口\n        return new Promise((resolve, reject) => {\n            Auth.register(this.values.username, this.values.password).then((user) => {\n                console.log('注册成功')\n                //注册成功为什么要 setUser  里面将 获取model 中的user, 赋值给 userStore 里面的 user;\n                // 一旦登录成功，model 中的 currentUser就会有值，这是 AV 提供的\n                userStore.pullUser();\n                resolve(user);\n            }).catch((error) => {\n                console.log('注册失败')\n                //重置 user\n                userStore.resetUser();\n                reject(error);\n            })\n        })\n    }\n\n    @action logOut() {\n        Auth.logOut();\n        // 用户注销时清空一切数据\n        userStore.resetUser();\n        historyStore.reset();\n        imageStore.reset();\n    }\n}\n\n\n\nexport default new AuthStore();","import React, {createContext,useContext} from 'react';\nimport authStore from './auth';\nimport userStore from './user';\nimport imageStore from './image';\nimport historyStore from './History';\n\nconst storeContext = createContext({\n    authStore,\n    userStore,\n    imageStore,\n    historyStore\n});\n\n//方便在控制台测试，查看 stores 中的内容\nwindow.stores = {\n    authStore,\n    userStore,\n    imageStore,\n    historyStore\n};\n\n\nconst useStores = ()=> useContext(storeContext);\n\nexport  {useStores};\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}